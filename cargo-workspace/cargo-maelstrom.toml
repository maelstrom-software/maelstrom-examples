# This example cargo-maelstrom.toml is meant to illustrate the various filter
# patterns for multiple packages in a workspace.
#
# See project at ../cargo-package for more Rust examples.
#
# It purposely starts from scratch, instead of from the configuration file you
# would get from running `cargo maelstrom --init`. This is for illustrative
# purposes only. You should start with the default config.

# The package_1::tests::tempfile tests need a writable /tmp to use tempfile out
# of the box. One way to provide that is to mount a tmpfs file system at /tmp.
# We have to provide a /tmp/ stub directory to mount it on.
#
# The default configuration for `cargo maelstrom` will include a tmpfs mount at
# `/tmp`.
#
# Note that we use `package-1` in the filter pattern to refer to the root
# package. This is the package name we provided in the root Cargo.toml.
[[directives]]
filter = "package.eq(package-1) && name.matches(tempfile)"
layers = [ { stubs = ["/tmp/"] } ]
mounts = [ { type = "tmp", mount_point = "/tmp" } ]

# This example shows executing a program in an image.
#
# We have to provide `/dev/null` for Rust's `Command::output`. We could mount
# the actual null device, but the empty file we get from the stubs layer suffices.
#
# Note that we use `package-2` in the filter pattern to refer to the non-root
# package.
[[directives]]
filter = "package.eq(package-2) && name.matches(subprocess)"
image = "docker://alpine"
include_shared_libraries = true
added_layers = [ { stubs = [ "/dev/null" ] } ]
